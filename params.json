{"name":"Hailey Framework","tagline":"A (M)VC Framework to create complex MVC related web projects","body":"### What is it?\r\n\r\nThis is a very tiny mvc framework within all needing to design small one page website up to complex search engines and social networks with ease. Unlike overloaded monster like YII2 or ZEND, this framework lead to success within 5 minutes.\r\n\r\n####Simple\r\nHAILEY is an very small library and framework for your projects. It does no matter how big or how small your project will be.\r\n####Minimalist\r\nOnly the real needed essentials for coders are here. It's editable with an ease.\r\n####Robust\r\nCore code is very small and can be audited and secured quickly, also by beginners. It's a good place to start from here.\r\nSQL injection would be unable by protection with PDO.\r\n####Unobtrusive\r\nNo restrictions on use of other libraries like PEAR or another ORM like Doctrine.\r\nAll PHP globals are accessible.\r\n####Flexible\r\nPDO abstraction allows choice of databases.\r\nCore MVC classes can be extended or overriden easily using object oriented inheritance.\r\nChoice of using procedural or object-oriented code or both! This was a real hard decision and i'm sure,\r\nthat many hardcore coders want me dead by now :)\r\n####Fast\r\nNo feature, code or framework bloat at all.\r\nEven faster when used with a PHP Accelerator like APC.\r\n####Friendly URL\r\nIt uses Human/Robot friendly URLs.\r\nAlso upgrade friendly, simply overwrite of the old core file with the new one!\r\n\r\n### What's the name for?\r\n\r\nHAILEY is named by the daughter of Swen Kalski who died in Summer 2015 and is part of huge websites like spar-mit.com or fappub.com. Also the Website of Swen lambda-code.com was build with it.\r\n\r\n### Let's start\r\n\r\n####The Model ORM CLASS\r\nHAILEY provides a \"Model\" ORM class to let you map your database tables as PHP objects. It requires PHP5.\r\nData objects extend the Model class and have five functions: Create, Retrieve, Update, Delete and Exists.\r\n\r\nLet's start with a little \"users\" table, with the following fields: \r\nuid (autoincremented primary key)\r\nusername\r\npassword \r\nfullname \r\ncreated_date\r\n\r\nNow let's build a Model. By the Way - this is not a tutorial for save Logins. Don't use it, for real Projects.\r\n```php\r\n\t<?php\r\n\tclass User extends H_Model {\r\n\tfunction User() {\r\n\t//call parent with primary key name \"uid\", table name \"users\"\r\n\t//and function that returns the pdo handler named \"getdbh\"\r\n\tparent::__construct('uid','users','getdbh');\r\n\t//list of table fields below, need not contain all fields in table.\r\n\t$this->rs['uid'] = '';\r\n\t$this->rs['username'] = '';\r\n\t$this->rs['password'] = '';\r\n\t$this->rs['fullname'] = '';\r\n\t$this->rs['created_dt'] = '';\r\n\t}\r\n}\r\n?>\r\n```\r\n\r\nIf you are an real lazy coder.\r\nHAILEY can create the object for you. The only thing you need is the name of the table.\r\n```php\r\n\t<?php\r\n\tclass User extends H_Model {\r\n\tfunction User() {\r\n\t//call parent with primary key name \"uid\", table name \"users\"\r\n\t//and function that returns the pdo handler named \"getdbh\"\r\n\tparent::__construct('uid','users','getdbh');\r\n\t//list of table fields below, need not contain all fields in table.\r\n\t$this->rs['uid'] = '';\r\n\t$this->rs['username'] = '';\r\n\t$this->rs['password'] = '';\r\n\t$this->rs['fullname'] = '';\r\n\t$this->rs['created_dt'] = '';\r\n\t}\r\n}\r\n?>\r\n```\r\n\r\nFor the Model to work, a global function that returns the PDO needs to be defined.\r\nIn this case we got an table called User:\r\n```php\r\n<?php\r\n                    $dbm = new H_DBM();\r\n                    $dbm->createModel('User');\r\n                    $user = new User();\r\n                    $user_array = $user->retrieve_many();\r\n?>\r\n```\r\n\r\nI think this is an really lazy-mode.\r\n\r\nHere a few snippets to se how the Model works\r\n\r\n```php\r\n//Create\r\n$user = new User();\r\n$user->set('username','user');\r\n$user->set('password','password');\r\n$user->create();\r\n$uid=$user->get('uid');\r\n\r\n//Update\r\n$user->set('password','newpassword');\r\n$user->update();\r\n\r\n//Retrieve, Delete, Exists\r\n$user = new User();\r\n$user->retrieve($uid);\r\nif ($user->exists())\r\n\t$user->delete();\r\n\r\n//Retrieve based on other criteria than the PK\r\n$user = new User();\r\n$user->retrieve_one(\"username=?\",'yetanotherusr');\r\n$user->retrieve_one(\"username=? AND password=? AND status='enabled'\",array('erickoh','123456'));\r\n\r\n//Return an array of Model objects\r\n$user = new User();\r\n$user_array = $user->retrieve_many(\"username LIKE ?\",'eric%');\r\nforeach ($user_array as $user)\r\n\t$user->delete();\r\n\r\n//Return selected fields as array\r\n$user = new User();\r\n$result_array = $user->select(\"username,email\",\"username LIKE ?\",'eric%');\r\nprint_r($result_array);\r\n```\r\n\r\n#### Controller Class\r\n\r\nIn HAILEY, the Controller looks at the HTTP Request and then route the program control to the appropriate function.\r\nIt allows the use of Search Engine Friendly URLs on your web application.\r\n> For the Controller to work, mod_rewrite is required and has to be configured via the webserver config file or via an .htaccess file.\r\n\r\nHow it works:\r\nParse the HTTP Request URL\r\nIncludes a php file based on (1)\r\nCalls a php function included from (2)\r\n\r\nSome examples:\r\n\r\nhttp://mydomain.com/example-controller/action/param1/param2\r\nWith the above URL, it includes a file example-controller/action.php and calls the function _action(param1,param2)\r\n\r\nhttp://mydomain.com/example-controller2/action2\r\nWith the above URL, it includes a file example-controller2/action2.php and calls the function _action2()\r\n\r\nhttp://mydomain.com/example-controller2/action2/\r\nWith the above URL, it includes a file example-controller2/action2.php and calls the function _action2('')\r\n\r\nhttp://mydomain.com/example-controller/action/param1/?a=1&b=2\r\nWith the above URL, it includes a file example-controller/action.php and calls the function _action(param1,'?a=1&b=2')\r\nThe querystring works and the global variable $_GET = array('a'=>1, 'b'=>2). \r\nYour function does not have to define the second parameter.\r\n\r\nThis is how the Controller is called:\r\n```php\r\n$controller = new H_Controller('../app/controllers/','/','main','index'); \r\n$controller->parse_http_request()->route_request();\r\n```\r\n\r\n\r\n#### View Class\r\n\r\nThe templates are plain PHP files, and so normal PHP code can be used and the PHP global variables are accessible together with any extra variables you have passed in as a parameter in the form of an associative array.\r\n\r\n\r\nLet's say you have a template file named \r\nwelcome.tpl.php with the following contents:\r\n```php\r\n<html>\r\n  <head>\r\n    <title><?php echo $pagename;?></title>\r\n  </head>\r\n  <body>\r\n    <h1>Welcome <?php echo $username;?>,</h1>\r\n    <p>The time is now <?php echo date(\"Y-m-d H:i:s\");?></p>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThis is how you use call template file using a simple function call:\r\n```php\r\n<?php\r\n\t$vars = array(\"pagename\"=\"Welcome!\",\"username\"=\"yetanotherusr\");\r\n\techo View::do_fetch(\"/path/to/welcome.tpl.php\",$vars);\r\n?>\r\n```\r\n\r\nSame result as above, but using object-oriented code:\r\n```php\r\n<?php\r\n\t$vars = array(\"pagename\"=\"Welcome!\",\"username\"=\"yetanotherusr\");\r\n\t$view = new H_View(\"/path/to/welcome.tpl.php\",$vars);\r\n\techo $view->fetch();\r\n?>\r\n```\r\n\r\nAnnnnd another way, a little bit easier for beginners\r\n```php\r\n<?php\r\n\t$view = new H_View(\"/path/to/welcome.tpl.php\");\r\n\t$view->set(\"pagename\",\"Welcome!\");\r\n\t$view->set(\"username\",\"Eric\");\r\n\techo $view->fetch();\r\n?>\r\n```\r\n\r\n\r\n####Other ORM\r\nThe ORM class is not related to the View-Controller, \r\nso you can replace it with another ORM Classes even CouchDB, MongoDB or even POSTgreSQL.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}